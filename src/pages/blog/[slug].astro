---
import { type CollectionEntry, getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import TableOfContents from '../../components/TableOfContents.astro';
import BackToTop from '../../components/BackToTop.astro';
import type { MarkdownHeading } from 'astro';
import { slugify } from '../../utils/common-utils';

export async function getStaticPaths() {
    const blogPosts = await getCollection('blog'); // Assuming your blog collection is named 'blog'
    return blogPosts.map((post) => ({
        params: { slug: post.slug },
        props: { post }
    }));
}

type Props = { post: CollectionEntry<'blog'> };

const { post } = Astro.props;
const { title, seo } = post.data;
const { Content } = await post.render();

// Get headings and apply slugify
const rawHeadings = await post.render().then((result) => result.headings);
const headings = rawHeadings.map((heading) => ({
    ...heading,
    slug: slugify(heading.text)
}));

// Generic scroll target: to scroll to top or the table of contents if available
const scrollTarget = headings.length > 0 ? '#table-of-contents' : 'body';

// Reading time and date of publish
const { publishDate } = post.data;
const { minutesRead } = (await post.render()).remarkPluginFrontmatter;

function formatDate(isoDate: string) {
    return new Date(isoDate).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
}
---

<BaseLayout title={seo?.title ?? title} description={seo?.description} image={seo?.image} showHeader={false}>
    <article class="mb-16 sm:mb-24">
        <header class="mb-8">
            <h1 class="text-3xl leading-tight font-serif font-medium sm:text-5xl sm:leading-tight">{title}</h1>
        </header>
        <p class="mt-4 mb-4 text-lg">
            <strong>üóìÔ∏è {formatDate(publishDate)}</strong>
            &nbsp;&nbsp;
            <strong>üìñ {minutesRead}</strong>
        </p>
        <div class="max-w-none prose prose-dante sm:prose-lg" style="--tw-prose-body: 0.1em 0;">
            <Content />
        </div>
    </article>

    {
        headings.length > 0 && (
            <div id="table-of-contents" style="display: none;">
                <TableOfContents headings={headings} />
            </div>
        )
    }

    <!-- Add the Back to Top Button -->
    <BackToTop scrollTarget={scrollTarget} />
</BaseLayout>

<script>
    document.addEventListener('astro:page-load', () => {
        const tocPlaceholder = document.getElementById('toc-placeholder');
        const tocComponent = document.getElementById('table-of-contents');

        if (tocPlaceholder && tocComponent) {
            tocPlaceholder.replaceWith(tocComponent);
            tocComponent.style.display = 'block';
        }

        // Add ids to headings
        const headings = document.querySelectorAll('h2, h3, h4, h5, h6');
        headings.forEach((heading) => {
            if (heading.textContent) {
                heading.id = slugify(heading.textContent);
            }
        });
    });

    /**
     * Updated slugify function to fix the 'querySelector' error.
     * It prefixes slugs with a letter to ensure they are valid CSS selectors.
     * Also, ensures that special characters are handled.
     */
    function slugify(text: string): string {
        return (
            'h-' +
            text // Prefix with a letter (e.g., 'h-')
                .toString()
                .toLowerCase()
                .replace(/\s+/g, '-') // Replace spaces with dashes
                .replace(/[^\w\-]+/g, '') // Remove invalid characters
                .replace(/\-\-+/g, '-') // Collapse multiple dashes
                .replace(/^-+/, '') // Trim starting dashes
                .replace(/-+$/, '')
        ); // Trim trailing dashes
    }
</script>
