---
import type { HTMLAttributes } from 'astro/types';

interface Props extends HTMLAttributes<'button'> {
    isCloudTag?: boolean;
    href?: string;
}

const { class: className, isCloudTag = false, href, ...rest } = Astro.props;

// Define color schemes
const colorSchemes = [
    {
        bg: 'bg-red-200 dark:bg-red-100',
        text: 'text-red-900 dark:text-red-800',
        border: 'border-red-400 dark:border-red-300',
        hover: 'hover:bg-red-300 dark:hover:bg-red-200'
    },
    {
        bg: 'bg-yellow-200 dark:bg-yellow-100',
        text: 'text-yellow-900 dark:text-yellow-800',
        border: 'border-yellow-400 dark:border-yellow-300',
        hover: 'hover:bg-yellow-300 dark:hover:bg-yellow-200'
    },
    {
        bg: 'bg-blue-200 dark:bg-blue-100',
        text: 'text-blue-900 dark:text-blue-800',
        border: 'border-blue-400 dark:border-blue-300',
        hover: 'hover:bg-blue-300 dark:hover:bg-blue-200'
    },
    {
        bg: 'bg-green-200 dark:bg-green-100',
        text: 'text-green-900 dark:text-green-800',
        border: 'border-green-400 dark:border-green-300',
        hover: 'hover:bg-green-300 dark:hover:bg-green-200'
    },
    {
        bg: 'bg-purple-200 dark:bg-purple-100',
        text: 'text-purple-900 dark:text-purple-800',
        border: 'border-purple-400 dark:border-purple-300',
        hover: 'hover:bg-purple-300 dark:hover:bg-purple-200'
    },
    {
        bg: 'bg-teal-200 dark:bg-teal-100',
        text: 'text-teal-900 dark:text-teal-800',
        border: 'border-teal-400 dark:border-teal-300',
        hover: 'hover:bg-teal-300 dark:hover:bg-teal-200'
    },
    {
        bg: 'bg-indigo-200 dark:bg-indigo-100',
        text: 'text-indigo-900 dark:text-indigo-800',
        border: 'border-indigo-400 dark:border-indigo-300',
        hover: 'hover:bg-indigo-300 dark:hover:bg-indigo-200'
    },
    {
        bg: 'bg-orange-200 dark:bg-orange-100',
        text: 'text-orange-900 dark:text-orange-800',
        border: 'border-orange-400 dark:border-orange-300',
        hover: 'hover:bg-orange-300 dark:hover:bg-orange-200'
    },
    {
        bg: 'bg-gray-200 dark:bg-gray-100',
        text: 'text-gray-900 dark:text-gray-800',
        border: 'border-gray-400 dark:border-gray-300',
        hover: 'hover:bg-gray-300 dark:hover:bg-gray-200'
    },
    {
        bg: 'bg-pink-200 dark:bg-pink-100',
        text: 'text-pink-900 dark:text-pink-800',
        border: 'border-pink-400 dark:border-pink-300',
        hover: 'hover:bg-pink-300 dark:hover:bg-pink-200'
    }
];

// Predefined tag-to-color mapping
const tagColorMap = {
    personal: colorSchemes[0],
    'creative writing': colorSchemes[1],
    movies: colorSchemes[2],
    music: colorSchemes[3],
    books: colorSchemes[4],
    travel: colorSchemes[5],
    writing: colorSchemes[6],
    marketing: colorSchemes[7]
} as const;

type TagKey = keyof typeof tagColorMap;

// Function to select color based on tag
function selectColor(tag: string) {
    const lowercaseTag = tag.toLowerCase() as TagKey;
    return lowercaseTag in tagColorMap ? tagColorMap[lowercaseTag] : colorSchemes[Object.keys(tagColorMap).length % colorSchemes.length];
}

const tagText = await Astro.slots.render('default');
const colorScheme = selectColor(tagText || '');

const classes = `
    inline-flex items-center justify-center px-3 py-1.5 text-sm leading-tight rounded-full transition
    ${colorScheme.bg} ${colorScheme.text} ${colorScheme.border} ${colorScheme.hover}
    ${isCloudTag ? 'opacity-50 hover:opacity-75' : ''}
    ${className || ''}
`;
---

{
    href ? (
        <a href={href} class={classes} {...rest}>
            <slot />
        </a>
    ) : (
        <button class={classes} {...rest}>
            <slot />
        </button>
    )
}

<style>
    .selected {
        opacity: 1 !important;
    }
</style>
